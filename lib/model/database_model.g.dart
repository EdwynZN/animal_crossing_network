// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'database_model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Villager.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Villager TABLE
class TableVillager extends SqfEntityTableBase {
  TableVillager() {
    // declare properties of EntityTable
    tableName = 'villager';
    relationType = RelationType.ONE_TO_MANY;
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('amiiboId', DbType.integer),
      SqfEntityFieldBase('birthday', DbType.date),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableVillager();
  }
}

// Resident TABLE
class TableResident extends SqfEntityTableBase {
  TableResident() {
    // declare properties of EntityTable
    tableName = 'resident';
    relationType = RelationType.ONE_TO_ONE;
    primaryKeyName = '';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldRelationshipBase(
          TableVillager.getInstance, DeleteRule.CASCADE,
          fieldName: '_villagerId',
          isPrimaryKeyField: true,
          relationType: RelationType.ONE_TO_ONE),
      SqfEntityFieldBase('favorite', DbType.bool, defaultValue: false),
      SqfEntityFieldBase('resident', DbType.bool, defaultValue: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableResident();
  }
}

// VillagerL10n TABLE
class TableVillagerL10n extends SqfEntityTableBase {
  TableVillagerL10n() {
    // declare properties of EntityTable
    tableName = 'villager_l10n';
    relationType = RelationType.ONE_TO_MANY;
    primaryKeyName = '';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldRelationshipBase(
          TableVillager.getInstance, DeleteRule.CASCADE,
          fieldName: 'villagerId',
          isPrimaryKeyField: true,
          relationType: RelationType.ONE_TO_MANY),
      SqfEntityFieldRelationshipBase(
          TableLanguage.getInstance, DeleteRule.CASCADE,
          fieldName: 'languageId',
          isPrimaryKeyField: true,
          relationType: RelationType.ONE_TO_MANY),
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('personality', DbType.text),
      SqfEntityFieldBase('gender', DbType.text),
      SqfEntityFieldBase('specie', DbType.text),
      SqfEntityFieldBase('catchPhrase', DbType.text),
      SqfEntityFieldBase('song', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableVillagerL10n();
  }
}

// Language TABLE
class TableLanguage extends SqfEntityTableBase {
  TableLanguage() {
    // declare properties of EntityTable
    tableName = 'language';
    relationType = RelationType.ONE_TO_MANY;
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableLanguage();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class ACDatabase extends SqfEntityModelProvider {
  ACDatabase() {
    databaseName = myDbModel.databaseName;
    databaseTables = [
      TableVillager.getInstance,
      TableResident.getInstance,
      TableVillagerL10n.getInstance,
      TableLanguage.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Villager
class Villager {
  Villager({this.id, this.amiiboId, this.birthday}) {
    _setDefaultValues();
  }
  Villager.withFields(id, this.amiiboId, this.birthday) {
    _setDefaultValues();
  }
  Villager.withId(id, this.amiiboId, this.birthday) {
    _setDefaultValues();
  }
  Villager.fromMap(Map<String, dynamic> o) {
    _setDefaultValues();
    id = int.tryParse(o['id'].toString());
    if (o['amiiboId'] != null)
      amiiboId = int.tryParse(o['amiiboId'].toString());
    if (o['birthday'] != null)
      birthday = int.tryParse(o['birthday'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['birthday'].toString()))
          : DateTime.tryParse(o['birthday'].toString());

    isSaved = true;
  }
  // FIELDS (Villager)
  int id;
  int amiiboId;
  DateTime birthday;
  bool isSaved;
  BoolResult saveResult;
  // end FIELDS (Villager)

// COLLECTIONS & VIRTUALS (Villager)
  Resident _resident;
  Resident get resident {
    _resident = _resident ?? Resident();
    return _resident;
  }

  void set resident(Resident resident) {
    _resident = resident;
  }

  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plVillagerL10ns', 'plField2'..]) or so on..
  List<VillagerL10n> plVillagerL10ns;

  /// get VillagerL10n(s) filtered by villagerId=id
  VillagerL10nFilterBuilder getVillagerL10ns(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return VillagerL10n()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .villagerId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Villager)

  static const bool _softDeleteActivated = false;
  VillagerManager __mnVillager;

  VillagerManager get _mnVillager {
    return __mnVillager = __mnVillager ?? VillagerManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (amiiboId != null) {
      map['amiiboId'] = amiiboId;
    }

    if (birthday != null) {
      map['birthday'] = forJson
          ? '$birthday.year-$birthday.month-$birthday.day'
          : forQuery
              ? DateTime(birthday.year, birthday.month, birthday.day)
                  .millisecondsSinceEpoch
              : birthday;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChilds(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (amiiboId != null) {
      map['amiiboId'] = amiiboId;
    }

    if (birthday != null) {
      map['birthday'] = forJson
          ? '$birthday.year-$birthday.month-$birthday.day'
          : forQuery
              ? DateTime(birthday.year, birthday.month, birthday.day)
                  .millisecondsSinceEpoch
              : birthday;
    }

// COLLECTIONS (Villager)
    if (!forQuery && resident != null) {
      map['resident'] = resident.toMap();
    }
    if (!forQuery) {
      map['VillagerL10ns'] = await getVillagerL10ns().toMapList();
    }
// END COLLECTIONS (Villager)

    return map;
  }

  /// This method returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds(false, true));
  }

  List<dynamic> toArgs() {
    return [
      id,
      amiiboId,
      birthday != null ? birthday.millisecondsSinceEpoch : null
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      id,
      amiiboId,
      birthday != null ? birthday.millisecondsSinceEpoch : null
    ];
  }

  static Future<List<Villager>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Villager.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Villager>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Villager>[];
    try {
      objList = list
          .map((villager) => Villager.fromMap(villager as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Villager.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  /*
    /// REMOVED AFTER v1.2.1+14 
    static Future<List<Villager>> fromObjectList(Future<List<dynamic>> o) async {
      final data = await o;
      return await Villager.fromMapList(data);
    } 
    */

  static Future<List<Villager>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final List<Villager> objList = <Villager>[];
    for (final map in data) {
      final obj = Villager.fromMap(map as Map<String, dynamic>);

//      RELATIONS OneToOne (Villager)
      obj._resident =
          await Resident().select()._villagerId.equals(obj.id).toSingle();

//      END RELATIONS OneToOne (Villager)

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (!loadedFields.contains('villager.plVillagerL10ns') &&
            (preloadFields == null ||
                preloadFields.contains('plVillagerL10ns'))) {
          loadedFields.add('villager.plVillagerL10ns');
          obj.plVillagerL10ns = obj.plVillagerL10ns ??
              await obj.getVillagerL10ns().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false,
                  loadedFields: loadedFields);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Villager by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Villager if exist, otherwise returns null
  Future<Villager> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    Villager obj;
    final data = await _mnVillager.getById([id]);
    if (data.length != 0) {
      obj = Villager.fromMap(data[0] as Map<String, dynamic>);

//      RELATIONS OneToOne (Villager)
      obj._resident =
          await Resident().select()._villagerId.equals(obj.id).toSingle();

//      END RELATIONS OneToOne (Villager)

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (!loadedFields.contains('villager.plVillagerL10ns') &&
            (preloadFields == null ||
                preloadFields.contains('plVillagerL10ns'))) {
          loadedFields.add('villager.plVillagerL10ns');
          obj.plVillagerL10ns = obj.plVillagerL10ns ??
              await obj.getVillagerL10ns().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false,
                  loadedFields: loadedFields);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Villager) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0 || !isSaved) {
      await _mnVillager.insert(this);
      if (saveResult.success) isSaved = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnVillager.update(this);
    }

// save() OneToOne relations (Villager)
    _resident?._villagerId = id;
    await _resident?._save();
// END save() OneToOne relations (Villager)

    return id;
  }

  /// saveAll method saves the sent List<Villager> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  Future<List<dynamic>> saveAll(List<Villager> villagers) async {
    // final results = _mnVillager.saveAll('INSERT OR REPLACE INTO villager (id,amiiboId, birthday)  VALUES (?,?,?)',villagers);
    // return results; removed in sqfentity_gen 1.3.0+6
    ACDatabase().batchStart();
    for (final obj in villagers) {
      await obj.save();
    }
    return ACDatabase().batchCommit();
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnVillager.rawInsert(
              'INSERT OR REPLACE INTO villager (id,amiiboId, birthday)  VALUES (?,?,?)',
              [
                id,
                amiiboId,
                birthday != null ? birthday.millisecondsSinceEpoch : null
              ]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Villager id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Villager id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Villager Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Villager>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Villager> villagers) async {
    final results = await _mnVillager.rawInsertAll(
        'INSERT OR REPLACE INTO villager (id,amiiboId, birthday)  VALUES (?,?,?)',
        villagers);
    return results;
  }

  /// Deletes Villager

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Villager invoked (id=$id)');
    var result = BoolResult();
    {
      result =
          await Resident().select()._villagerId.equals(id).delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    {
      result = await VillagerL10n()
          .select()
          .villagerId
          .equals(id)
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnVillager
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnVillager.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  //private VillagerFilterBuilder _Select;
  VillagerFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return VillagerFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  VillagerFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return VillagerFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion villager

// region VillagerField
class VillagerField extends SearchCriteria {
  VillagerField(this.villagerFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  VillagerFilterBuilder villagerFB;

  VillagerField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  VillagerFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    villagerFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, villagerFB.parameters, param, SqlSyntax.EQuals,
            villagerFB._addedBlocks)
        : setCriteria(pValue, villagerFB.parameters, param, SqlSyntax.NotEQuals,
            villagerFB._addedBlocks);
    _waitingNot = '';
    villagerFB._addedBlocks.needEndBlock[villagerFB._blockIndex] =
        villagerFB._addedBlocks.retVal;
    return villagerFB;
  }

  VillagerFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    villagerFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, villagerFB.parameters, param,
            SqlSyntax.EQualsOrNull, villagerFB._addedBlocks)
        : setCriteria(pValue, villagerFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, villagerFB._addedBlocks);
    _waitingNot = '';
    villagerFB._addedBlocks.needEndBlock[villagerFB._blockIndex] =
        villagerFB._addedBlocks.retVal;
    return villagerFB;
  }

  VillagerFilterBuilder isNull() {
    villagerFB._addedBlocks = setCriteria(
        0,
        villagerFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        villagerFB._addedBlocks);
    _waitingNot = '';
    villagerFB._addedBlocks.needEndBlock[villagerFB._blockIndex] =
        villagerFB._addedBlocks.retVal;
    return villagerFB;
  }

  VillagerFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      villagerFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          villagerFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          villagerFB._addedBlocks);
      _waitingNot = '';
      villagerFB._addedBlocks.needEndBlock[villagerFB._blockIndex] =
          villagerFB._addedBlocks.retVal;
    }
    return villagerFB;
  }

  VillagerFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      villagerFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          villagerFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          villagerFB._addedBlocks);
      _waitingNot = '';
      villagerFB._addedBlocks.needEndBlock[villagerFB._blockIndex] =
          villagerFB._addedBlocks.retVal;
      villagerFB._addedBlocks.needEndBlock[villagerFB._blockIndex] =
          villagerFB._addedBlocks.retVal;
    }
    return villagerFB;
  }

  VillagerFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      villagerFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          villagerFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          villagerFB._addedBlocks);
      _waitingNot = '';
      villagerFB._addedBlocks.needEndBlock[villagerFB._blockIndex] =
          villagerFB._addedBlocks.retVal;
    }
    return villagerFB;
  }

  VillagerFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      villagerFB._addedBlocks = setCriteria(
          pFirst,
          villagerFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          villagerFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        villagerFB._addedBlocks = setCriteria(pFirst, villagerFB.parameters,
            param, SqlSyntax.LessThan, villagerFB._addedBlocks);
      } else {
        villagerFB._addedBlocks = setCriteria(pFirst, villagerFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, villagerFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        villagerFB._addedBlocks = setCriteria(pLast, villagerFB.parameters,
            param, SqlSyntax.GreaterThan, villagerFB._addedBlocks);
      } else {
        villagerFB._addedBlocks = setCriteria(pLast, villagerFB.parameters,
            param, SqlSyntax.LessThanOrEquals, villagerFB._addedBlocks);
      }
    }
    _waitingNot = '';
    villagerFB._addedBlocks.needEndBlock[villagerFB._blockIndex] =
        villagerFB._addedBlocks.retVal;
    return villagerFB;
  }

  VillagerFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    villagerFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, villagerFB.parameters, param,
            SqlSyntax.GreaterThan, villagerFB._addedBlocks)
        : setCriteria(pValue, villagerFB.parameters, param,
            SqlSyntax.LessThanOrEquals, villagerFB._addedBlocks);
    _waitingNot = '';
    villagerFB._addedBlocks.needEndBlock[villagerFB._blockIndex] =
        villagerFB._addedBlocks.retVal;
    return villagerFB;
  }

  VillagerFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    villagerFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, villagerFB.parameters, param, SqlSyntax.LessThan,
            villagerFB._addedBlocks)
        : setCriteria(pValue, villagerFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, villagerFB._addedBlocks);
    _waitingNot = '';
    villagerFB._addedBlocks.needEndBlock[villagerFB._blockIndex] =
        villagerFB._addedBlocks.retVal;
    return villagerFB;
  }

  VillagerFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    villagerFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, villagerFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, villagerFB._addedBlocks)
        : setCriteria(pValue, villagerFB.parameters, param, SqlSyntax.LessThan,
            villagerFB._addedBlocks);
    _waitingNot = '';
    villagerFB._addedBlocks.needEndBlock[villagerFB._blockIndex] =
        villagerFB._addedBlocks.retVal;
    return villagerFB;
  }

  VillagerFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    villagerFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, villagerFB.parameters, param,
            SqlSyntax.LessThanOrEquals, villagerFB._addedBlocks)
        : setCriteria(pValue, villagerFB.parameters, param,
            SqlSyntax.GreaterThan, villagerFB._addedBlocks);
    _waitingNot = '';
    villagerFB._addedBlocks.needEndBlock[villagerFB._blockIndex] =
        villagerFB._addedBlocks.retVal;
    return villagerFB;
  }

  VillagerFilterBuilder inValues(dynamic pValue) {
    villagerFB._addedBlocks = setCriteria(
        pValue,
        villagerFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        villagerFB._addedBlocks);
    _waitingNot = '';
    villagerFB._addedBlocks.needEndBlock[villagerFB._blockIndex] =
        villagerFB._addedBlocks.retVal;
    return villagerFB;
  }
}
// endregion VillagerField

// region VillagerFilterBuilder
class VillagerFilterBuilder extends SearchCriteria {
  VillagerFilterBuilder(Villager obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Villager _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  VillagerFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  VillagerFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  VillagerFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  VillagerFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  VillagerFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  /// int count = LIMIT
  VillagerFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  VillagerFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  VillagerFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  VillagerFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  VillagerFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  VillagerField setField(VillagerField field, String colName, DbType dbtype) {
    return VillagerField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  VillagerField _id;
  VillagerField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  VillagerField _amiiboId;
  VillagerField get amiiboId {
    return _amiiboId = setField(_amiiboId, 'amiiboId', DbType.integer);
  }

  VillagerField _birthday;
  VillagerField get birthday {
    return _birthday = setField(_birthday, 'birthday', DbType.date);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
        }
      } else {
        whereString += param.whereString;
      }
      if (param.value != null) {
        whereArguments.add(param.value);
      }
      if (param.value2 != null) {
        whereArguments.add(param.value2);
      }
    }
    if (Villager._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<Villager> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (Villager._softDeleteActivated && !hardDelete) {
      r = await _obj._mnVillager.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnVillager.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from villager ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnVillager.updateBatch(qparams, values);
  }

  /// This method always returns Villager Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Villager>
  Future<Villager> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnVillager.toList(qparams);
    final data = await objFuture;
    Villager obj;
    if (data.isNotEmpty) {
      obj = Villager.fromMap(data[0] as Map<String, dynamic>);

//      RELATIONS OneToOne (Villager)
      obj._resident =
          await Resident().select()._villagerId.equals(obj.id).toSingle();

//      END RELATIONS OneToOne (Villager)

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (!loadedFields.contains('villager.plVillagerL10ns') &&
            (preloadFields == null ||
                preloadFields.contains('plVillagerL10ns'))) {
          loadedFields.add('villager.plVillagerL10ns');
          obj.plVillagerL10ns = obj.plVillagerL10ns ??
              await obj.getVillagerL10ns().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false,
                  loadedFields: loadedFields);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) villagerCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final villagersFuture = await _obj._mnVillager.toList(qparams);
    final int count = villagersFuture[0]['CNT'] as int;
    if (villagerCount != null) {
      villagerCount(count);
    }
    return count;
  }

  /// This method returns List<Villager>.
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Villager>
  Future<List<Villager>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Villager> villagersData = await Villager.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields);
    return villagersData;
  }

  /// This method returns Json String
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnVillager.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Villager>>
  Future<List<DropdownMenuItem<Villager>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<Villager>> o)
          dropDownMenu]) async {
    _buildParameters();
    final villagersFuture = _obj._mnVillager.toList(qparams);

    final data = await villagersFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Villager>> items = []..add(DropdownMenuItem(
        value: Villager(),
        child: Text('Select Villager'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Villager.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)
          dropDownMenu]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final villagersFuture = _obj._mnVillager.toList(qparams);

    final data = await villagersFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Villager'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnVillager.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnVillager.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Villager.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnVillager.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion VillagerFilterBuilder

// region VillagerFields
class VillagerFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fAmiiboId;
  static TableField get amiiboId {
    return _fAmiiboId = _fAmiiboId ??
        SqlSyntax.setField(_fAmiiboId, 'amiiboId', DbType.integer);
  }

  static TableField _fBirthday;
  static TableField get birthday {
    return _fBirthday =
        _fBirthday ?? SqlSyntax.setField(_fBirthday, 'birthday', DbType.date);
  }
}
// endregion VillagerFields

//region VillagerManager
class VillagerManager extends SqfEntityProvider {
  VillagerManager()
      : super(ACDatabase(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static String _tableName = 'villager';
  //static String _colId = 'id';
  static List<String> _primaryKeyList = ['id'];
  static String _whereStr = 'id=?';
}

//endregion VillagerManager
// region Resident
class Resident {
  Resident({this.favorite, this.resident}) {
    _setDefaultValues();
  }
  Resident.withFields(this.favorite, this.resident) {
    _setDefaultValues();
  }
  Resident.withId(this._villagerId, this.favorite, this.resident) {
    _setDefaultValues();
  }
  Resident.fromMap(Map<String, dynamic> o) {
    _setDefaultValues();
    _villagerId = int.tryParse(o['_villagerId'].toString());

    if (o['favorite'] != null)
      favorite = o['favorite'] == 1 || o['favorite'] == true;
    if (o['resident'] != null)
      resident = o['resident'] == 1 || o['resident'] == true;

    isSaved = true;
  }
  // FIELDS (Resident)
  int _villagerId;
  bool favorite;
  bool resident;
  bool isSaved;
  BoolResult saveResult;
  // end FIELDS (Resident)

  static const bool _softDeleteActivated = false;
  ResidentManager __mnResident;

  ResidentManager get _mnResident {
    return __mnResident = __mnResident ?? ResidentManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (_villagerId != null) {
      map['_villagerId'] = _villagerId;
    }

    if (favorite != null) {
      map['favorite'] = forQuery ? (favorite ? 1 : 0) : favorite;
    }

    if (resident != null) {
      map['resident'] = forQuery ? (resident ? 1 : 0) : resident;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChilds(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (_villagerId != null) {
      map['_villagerId'] = _villagerId;
    }

    if (favorite != null) {
      map['favorite'] = forQuery ? (favorite ? 1 : 0) : favorite;
    }

    if (resident != null) {
      map['resident'] = forQuery ? (resident ? 1 : 0) : resident;
    }

    return map;
  }

  /// This method returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds(false, true));
  }

  List<dynamic> toArgs() {
    return [favorite, resident];
  }

  List<dynamic> toArgsWithIds() {
    return [_villagerId, favorite, resident];
  }

  static Future<List<Resident>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Resident.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Resident>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Resident>[];
    try {
      objList = list
          .map((resident) => Resident.fromMap(resident as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Resident.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  /*
    /// REMOVED AFTER v1.2.1+14 
    static Future<List<Resident>> fromObjectList(Future<List<dynamic>> o) async {
      final data = await o;
      return await Resident.fromMapList(data);
    } 
    */

  static Future<List<Resident>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final List<Resident> objList = <Resident>[];
    for (final map in data) {
      final obj = Resident.fromMap(map as Map<String, dynamic>);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Resident by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int _villagerId
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Resident if exist, otherwise returns null
  Future<Resident> getById(int _villagerId,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (_villagerId == null) {
      return null;
    }
    Resident obj;
    final data = await _mnResident.getById([_villagerId]);
    if (data.length != 0) {
      obj = Resident.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Resident) object. If the _villagerId field is null, saves as a new record and returns new _villagerId, if _villagerId is not null then updates record

  /// <returns>Returns _villagerId
  Future<int> _save() async {
    if (_villagerId == null || _villagerId == 0 || !isSaved) {
      await _mnResident.insert(this);
      if (saveResult.success) isSaved = true;
    } else {
      // _villagerId= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnResident.update(this);
    }

    return _villagerId;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns _villagerId
  Future<int> upsert() async {
    try {
      if (await _mnResident.rawInsert(
              'INSERT OR REPLACE INTO resident (_villagerId, favorite, resident)  VALUES (?,?,?)',
              [_villagerId, favorite, resident]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'Resident _villagerId=$_villagerId updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Resident _villagerId=$_villagerId did not update');
      }
      return _villagerId;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Resident Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// Deletes Resident

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Resident invoked (_villagerId=$_villagerId)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnResident.delete(QueryParams(
          whereString: '_villagerId=?', whereArguments: [_villagerId]));
    } else {
      return _mnResident.updateBatch(
          QueryParams(
              whereString: '_villagerId=?', whereArguments: [_villagerId]),
          {'isDeleted': 1});
    }
  }

  //private ResidentFilterBuilder _Select;
  ResidentFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return ResidentFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  ResidentFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return ResidentFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    favorite = favorite ?? false;
    resident = resident ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion resident

// region ResidentField
class ResidentField extends SearchCriteria {
  ResidentField(this.residentFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  ResidentFilterBuilder residentFB;

  ResidentField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  ResidentFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    residentFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, residentFB.parameters, param, SqlSyntax.EQuals,
            residentFB._addedBlocks)
        : setCriteria(pValue, residentFB.parameters, param, SqlSyntax.NotEQuals,
            residentFB._addedBlocks);
    _waitingNot = '';
    residentFB._addedBlocks.needEndBlock[residentFB._blockIndex] =
        residentFB._addedBlocks.retVal;
    return residentFB;
  }

  ResidentFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    residentFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, residentFB.parameters, param,
            SqlSyntax.EQualsOrNull, residentFB._addedBlocks)
        : setCriteria(pValue, residentFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, residentFB._addedBlocks);
    _waitingNot = '';
    residentFB._addedBlocks.needEndBlock[residentFB._blockIndex] =
        residentFB._addedBlocks.retVal;
    return residentFB;
  }

  ResidentFilterBuilder isNull() {
    residentFB._addedBlocks = setCriteria(
        0,
        residentFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        residentFB._addedBlocks);
    _waitingNot = '';
    residentFB._addedBlocks.needEndBlock[residentFB._blockIndex] =
        residentFB._addedBlocks.retVal;
    return residentFB;
  }

  ResidentFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      residentFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          residentFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          residentFB._addedBlocks);
      _waitingNot = '';
      residentFB._addedBlocks.needEndBlock[residentFB._blockIndex] =
          residentFB._addedBlocks.retVal;
    }
    return residentFB;
  }

  ResidentFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      residentFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          residentFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          residentFB._addedBlocks);
      _waitingNot = '';
      residentFB._addedBlocks.needEndBlock[residentFB._blockIndex] =
          residentFB._addedBlocks.retVal;
      residentFB._addedBlocks.needEndBlock[residentFB._blockIndex] =
          residentFB._addedBlocks.retVal;
    }
    return residentFB;
  }

  ResidentFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      residentFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          residentFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          residentFB._addedBlocks);
      _waitingNot = '';
      residentFB._addedBlocks.needEndBlock[residentFB._blockIndex] =
          residentFB._addedBlocks.retVal;
    }
    return residentFB;
  }

  ResidentFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      residentFB._addedBlocks = setCriteria(
          pFirst,
          residentFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          residentFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        residentFB._addedBlocks = setCriteria(pFirst, residentFB.parameters,
            param, SqlSyntax.LessThan, residentFB._addedBlocks);
      } else {
        residentFB._addedBlocks = setCriteria(pFirst, residentFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, residentFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        residentFB._addedBlocks = setCriteria(pLast, residentFB.parameters,
            param, SqlSyntax.GreaterThan, residentFB._addedBlocks);
      } else {
        residentFB._addedBlocks = setCriteria(pLast, residentFB.parameters,
            param, SqlSyntax.LessThanOrEquals, residentFB._addedBlocks);
      }
    }
    _waitingNot = '';
    residentFB._addedBlocks.needEndBlock[residentFB._blockIndex] =
        residentFB._addedBlocks.retVal;
    return residentFB;
  }

  ResidentFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    residentFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, residentFB.parameters, param,
            SqlSyntax.GreaterThan, residentFB._addedBlocks)
        : setCriteria(pValue, residentFB.parameters, param,
            SqlSyntax.LessThanOrEquals, residentFB._addedBlocks);
    _waitingNot = '';
    residentFB._addedBlocks.needEndBlock[residentFB._blockIndex] =
        residentFB._addedBlocks.retVal;
    return residentFB;
  }

  ResidentFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    residentFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, residentFB.parameters, param, SqlSyntax.LessThan,
            residentFB._addedBlocks)
        : setCriteria(pValue, residentFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, residentFB._addedBlocks);
    _waitingNot = '';
    residentFB._addedBlocks.needEndBlock[residentFB._blockIndex] =
        residentFB._addedBlocks.retVal;
    return residentFB;
  }

  ResidentFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    residentFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, residentFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, residentFB._addedBlocks)
        : setCriteria(pValue, residentFB.parameters, param, SqlSyntax.LessThan,
            residentFB._addedBlocks);
    _waitingNot = '';
    residentFB._addedBlocks.needEndBlock[residentFB._blockIndex] =
        residentFB._addedBlocks.retVal;
    return residentFB;
  }

  ResidentFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    residentFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, residentFB.parameters, param,
            SqlSyntax.LessThanOrEquals, residentFB._addedBlocks)
        : setCriteria(pValue, residentFB.parameters, param,
            SqlSyntax.GreaterThan, residentFB._addedBlocks);
    _waitingNot = '';
    residentFB._addedBlocks.needEndBlock[residentFB._blockIndex] =
        residentFB._addedBlocks.retVal;
    return residentFB;
  }

  ResidentFilterBuilder inValues(dynamic pValue) {
    residentFB._addedBlocks = setCriteria(
        pValue,
        residentFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        residentFB._addedBlocks);
    _waitingNot = '';
    residentFB._addedBlocks.needEndBlock[residentFB._blockIndex] =
        residentFB._addedBlocks.retVal;
    return residentFB;
  }
}
// endregion ResidentField

// region ResidentFilterBuilder
class ResidentFilterBuilder extends SearchCriteria {
  ResidentFilterBuilder(Resident obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Resident _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  ResidentFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  ResidentFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  ResidentFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  ResidentFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  ResidentFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  /// int count = LIMIT
  ResidentFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  ResidentFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ResidentFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ResidentFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ResidentFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  ResidentField setField(ResidentField field, String colName, DbType dbtype) {
    return ResidentField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  ResidentField __villagerId;
  ResidentField get _villagerId {
    return __villagerId = setField(__villagerId, '_villagerId', DbType.integer);
  }

  ResidentField _favorite;
  ResidentField get favorite {
    return _favorite = setField(_favorite, 'favorite', DbType.bool);
  }

  ResidentField _resident;
  ResidentField get resident {
    return _resident = setField(_resident, 'resident', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
        }
      } else {
        whereString += param.whereString;
      }
      if (param.value != null) {
        whereArguments.add(param.value);
      }
      if (param.value2 != null) {
        whereArguments.add(param.value2);
      }
    }
    if (Resident._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<Resident> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (Resident._softDeleteActivated && !hardDelete) {
      r = await _obj._mnResident.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnResident.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          '_villagerId IN (SELECT _villagerId from resident ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnResident.updateBatch(qparams, values);
  }

  /// This method always returns Resident Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Resident>
  Future<Resident> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnResident.toList(qparams);
    final data = await objFuture;
    Resident obj;
    if (data.isNotEmpty) {
      obj = Resident.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) residentCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final residentsFuture = await _obj._mnResident.toList(qparams);
    final int count = residentsFuture[0]['CNT'] as int;
    if (residentCount != null) {
      residentCount(count);
    }
    return count;
  }

  /// This method returns List<Resident>.
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Resident>
  Future<List<Resident>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Resident> residentsData = await Resident.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields);
    return residentsData;
  }

  /// This method returns Json String
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnResident.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Resident>>
  Future<List<DropdownMenuItem<Resident>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<Resident>> o)
          dropDownMenu]) async {
    _buildParameters();
    final residentsFuture = _obj._mnResident.toList(qparams);

    final data = await residentsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Resident>> items = []..add(DropdownMenuItem(
        value: Resident(),
        child: Text('Select Resident'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Resident.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)
          dropDownMenu]) async {
    _buildParameters();
    qparams.selectColumns = ['_villagerId', displayTextColumn];
    final residentsFuture = _obj._mnResident.toList(qparams);

    final data = await residentsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Resident'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['_villagerId'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> _villagerIdData = <int>[];
    qparams.selectColumns = ['_villagerId'];
    final _villagerIdFuture = await _obj._mnResident.toList(qparams);

    final int count = _villagerIdFuture.length;
    for (int i = 0; i < count; i++) {
      _villagerIdData.add(_villagerIdFuture[i]['_villagerId'] as int);
    }
    return _villagerIdData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnResident.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Resident.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnResident.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ResidentFilterBuilder

// region ResidentFields
class ResidentFields {
  static TableField _fFavorite;
  static TableField get favorite {
    return _fFavorite =
        _fFavorite ?? SqlSyntax.setField(_fFavorite, 'favorite', DbType.bool);
  }

  static TableField _fResident;
  static TableField get resident {
    return _fResident =
        _fResident ?? SqlSyntax.setField(_fResident, 'resident', DbType.bool);
  }
}
// endregion ResidentFields

//region ResidentManager
class ResidentManager extends SqfEntityProvider {
  ResidentManager()
      : super(ACDatabase(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static String _tableName = 'resident';
  //static String _colId = '_villagerId';
  static List<String> _primaryKeyList = ['_villagerId'];
  static String _whereStr = '_villagerId=?';
}

//endregion ResidentManager
// region VillagerL10n
class VillagerL10n {
  VillagerL10n(
      {this.villagerId,
      this.languageId,
      this.name,
      this.personality,
      this.gender,
      this.specie,
      this.catchPhrase,
      this.song}) {
    _setDefaultValues();
  }
  VillagerL10n.withFields(this.name, this.personality, this.gender, this.specie,
      this.catchPhrase, this.song) {
    _setDefaultValues();
  }
  VillagerL10n.withId(this.villagerId, this.languageId, this.name,
      this.personality, this.gender, this.specie, this.catchPhrase, this.song) {
    _setDefaultValues();
  }
  VillagerL10n.fromMap(Map<String, dynamic> o) {
    _setDefaultValues();
    villagerId = int.tryParse(o['villagerId'].toString());

    languageId = int.tryParse(o['languageId'].toString());

    if (o['name'] != null) name = o['name'] as String;
    if (o['personality'] != null) personality = o['personality'] as String;
    if (o['gender'] != null) gender = o['gender'] as String;
    if (o['specie'] != null) specie = o['specie'] as String;
    if (o['catchPhrase'] != null) catchPhrase = o['catchPhrase'] as String;
    if (o['song'] != null) song = o['song'] as String;

    // RELATIONSHIPS FromMAP
    plVillager = o['villager'] != null
        ? Villager.fromMap(o['villager'] as Map<String, dynamic>)
        : null;
    plLanguage = o['language'] != null
        ? Language.fromMap(o['language'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP

    isSaved = true;
  }
  // FIELDS (VillagerL10n)
  int villagerId;
  int languageId;
  String name;
  String personality;
  String gender;
  String specie;
  String catchPhrase;
  String song;
  bool isSaved;
  BoolResult saveResult;
  // end FIELDS (VillagerL10n)

// RELATIONSHIPS (VillagerL10n)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plVillager', 'plField2'..]) or so on..
  Villager plVillager;

  /// get Villager By VillagerId
  Future<Villager> getVillager({bool loadParents = false}) async {
    final _obj = await Villager().getById(villagerId, loadParents: loadParents);
    return _obj;
  }

  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plLanguage', 'plField2'..]) or so on..
  Language plLanguage;

  /// get Language By LanguageId
  Future<Language> getLanguage({bool loadParents = false}) async {
    final _obj = await Language().getById(languageId, loadParents: loadParents);
    return _obj;
  }
  // END RELATIONSHIPS (VillagerL10n)

  static const bool _softDeleteActivated = false;
  VillagerL10nManager __mnVillagerL10n;

  VillagerL10nManager get _mnVillagerL10n {
    return __mnVillagerL10n = __mnVillagerL10n ?? VillagerL10nManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (villagerId != null) {
      map['villagerId'] = forView ? plVillager.id : villagerId;
    }

    if (languageId != null) {
      map['languageId'] = forView ? plLanguage.name : languageId;
    }

    if (name != null) {
      map['name'] = name;
    }

    if (personality != null) {
      map['personality'] = personality;
    }

    if (gender != null) {
      map['gender'] = gender;
    }

    if (specie != null) {
      map['specie'] = specie;
    }

    if (catchPhrase != null) {
      map['catchPhrase'] = catchPhrase;
    }

    if (song != null) {
      map['song'] = song;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChilds(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (villagerId != null) {
      map['villagerId'] = forView ? plVillager.id : villagerId;
    }

    if (languageId != null) {
      map['languageId'] = forView ? plLanguage.name : languageId;
    }

    if (name != null) {
      map['name'] = name;
    }

    if (personality != null) {
      map['personality'] = personality;
    }

    if (gender != null) {
      map['gender'] = gender;
    }

    if (specie != null) {
      map['specie'] = specie;
    }

    if (catchPhrase != null) {
      map['catchPhrase'] = catchPhrase;
    }

    if (song != null) {
      map['song'] = song;
    }

    return map;
  }

  /// This method returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds(false, true));
  }

  List<dynamic> toArgs() {
    return [name, personality, gender, specie, catchPhrase, song];
  }

  List<dynamic> toArgsWithIds() {
    return [
      villagerId,
      languageId,
      name,
      personality,
      gender,
      specie,
      catchPhrase,
      song
    ];
  }

  static Future<List<VillagerL10n>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR VillagerL10n.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<VillagerL10n>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <VillagerL10n>[];
    try {
      objList = list
          .map((villagerl10n) =>
              VillagerL10n.fromMap(villagerl10n as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR VillagerL10n.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  /*
    /// REMOVED AFTER v1.2.1+14 
    static Future<List<VillagerL10n>> fromObjectList(Future<List<dynamic>> o) async {
      final data = await o;
      return await VillagerL10n.fromMapList(data);
    } 
    */

  static Future<List<VillagerL10n>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final List<VillagerL10n> objList = <VillagerL10n>[];
    for (final map in data) {
      final obj = VillagerL10n.fromMap(map as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (!loadedFields.contains('villager.plVillager') &&
            (preloadFields == null ||
                loadParents ||
                preloadFields.contains('plVillager'))) {
          loadedFields.add('villager.plVillager');
          obj.plVillager =
              obj.plVillager ?? await obj.getVillager(loadParents: loadParents);
        }
        if (!loadedFields.contains('language.plLanguage') &&
            (preloadFields == null ||
                loadParents ||
                preloadFields.contains('plLanguage'))) {
          loadedFields.add('language.plLanguage');
          obj.plLanguage =
              obj.plLanguage ?? await obj.getLanguage(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns VillagerL10n by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int villagerId, int languageId
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns VillagerL10n if exist, otherwise returns null
  Future<VillagerL10n> getById(int villagerId, int languageId,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (villagerId == null) {
      return null;
    }
    VillagerL10n obj;
    final data = await _mnVillagerL10n.getById([villagerId, languageId]);
    if (data.length != 0) {
      obj = VillagerL10n.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (!loadedFields.contains('villager.plVillager') &&
            (preloadFields == null ||
                loadParents ||
                preloadFields.contains('plVillager'))) {
          loadedFields.add('villager.plVillager');
          obj.plVillager =
              obj.plVillager ?? await obj.getVillager(loadParents: loadParents);
        }
        if (!loadedFields.contains('language.plLanguage') &&
            (preloadFields == null ||
                loadParents ||
                preloadFields.contains('plLanguage'))) {
          loadedFields.add('language.plLanguage');
          obj.plLanguage =
              obj.plLanguage ?? await obj.getLanguage(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (VillagerL10n) object. If the villagerId field is null, saves as a new record and returns new villagerId, if villagerId is not null then updates record

  /// <returns>Returns villagerId
  Future<int> save() async {
    if (villagerId == null || villagerId == 0 || !isSaved) {
      await _mnVillagerL10n.insert(this);
      if (saveResult.success) isSaved = true;
    } else {
      // villagerId= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnVillagerL10n.update(this);
    }

    return villagerId;
  }

  /// saveAll method saves the sent List<VillagerL10n> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  Future<List<dynamic>> saveAll(List<VillagerL10n> villagerl10ns) async {
    // final results = _mnVillagerL10n.saveAll('INSERT OR REPLACE INTO villager_l10n (villagerId, languageId, name, personality, gender, specie, catchPhrase, song)  VALUES (?,?,?,?,?,?,?,?)',villagerl10ns);
    // return results; removed in sqfentity_gen 1.3.0+6
    ACDatabase().batchStart();
    for (final obj in villagerl10ns) {
      await obj.save();
    }
    return ACDatabase().batchCommit();
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns villagerId
  Future<int> upsert() async {
    try {
      if (await _mnVillagerL10n.rawInsert(
              'INSERT OR REPLACE INTO villager_l10n (villagerId, languageId, name, personality, gender, specie, catchPhrase, song)  VALUES (?,?,?,?,?,?,?,?)',
              [
                villagerId,
                languageId,
                name,
                personality,
                gender,
                specie,
                catchPhrase,
                song
              ]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'VillagerL10n villagerId=$villagerId updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'VillagerL10n villagerId=$villagerId did not update');
      }
      return villagerId;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'VillagerL10n Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<VillagerL10n>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<VillagerL10n> villagerl10ns) async {
    final results = await _mnVillagerL10n.rawInsertAll(
        'INSERT OR REPLACE INTO villager_l10n (villagerId, languageId, name, personality, gender, specie, catchPhrase, song)  VALUES (?,?,?,?,?,?,?,?)',
        villagerl10ns);
    return results;
  }

  /// Deletes VillagerL10n

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete VillagerL10n invoked (villagerId=$villagerId)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnVillagerL10n.delete(QueryParams(
          whereString: 'villagerId=? AND languageId=?',
          whereArguments: [villagerId, languageId]));
    } else {
      return _mnVillagerL10n.updateBatch(
          QueryParams(
              whereString: 'villagerId=? AND languageId=?',
              whereArguments: [villagerId, languageId]),
          {'isDeleted': 1});
    }
  }

  //private VillagerL10nFilterBuilder _Select;
  VillagerL10nFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return VillagerL10nFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  VillagerL10nFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return VillagerL10nFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion villagerl10n

// region VillagerL10nField
class VillagerL10nField extends SearchCriteria {
  VillagerL10nField(this.villagerl10nFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  VillagerL10nFilterBuilder villagerl10nFB;

  VillagerL10nField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  VillagerL10nFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    villagerl10nFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, villagerl10nFB.parameters, param,
            SqlSyntax.EQuals, villagerl10nFB._addedBlocks)
        : setCriteria(pValue, villagerl10nFB.parameters, param,
            SqlSyntax.NotEQuals, villagerl10nFB._addedBlocks);
    _waitingNot = '';
    villagerl10nFB._addedBlocks.needEndBlock[villagerl10nFB._blockIndex] =
        villagerl10nFB._addedBlocks.retVal;
    return villagerl10nFB;
  }

  VillagerL10nFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    villagerl10nFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, villagerl10nFB.parameters, param,
            SqlSyntax.EQualsOrNull, villagerl10nFB._addedBlocks)
        : setCriteria(pValue, villagerl10nFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, villagerl10nFB._addedBlocks);
    _waitingNot = '';
    villagerl10nFB._addedBlocks.needEndBlock[villagerl10nFB._blockIndex] =
        villagerl10nFB._addedBlocks.retVal;
    return villagerl10nFB;
  }

  VillagerL10nFilterBuilder isNull() {
    villagerl10nFB._addedBlocks = setCriteria(
        0,
        villagerl10nFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        villagerl10nFB._addedBlocks);
    _waitingNot = '';
    villagerl10nFB._addedBlocks.needEndBlock[villagerl10nFB._blockIndex] =
        villagerl10nFB._addedBlocks.retVal;
    return villagerl10nFB;
  }

  VillagerL10nFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      villagerl10nFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          villagerl10nFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          villagerl10nFB._addedBlocks);
      _waitingNot = '';
      villagerl10nFB._addedBlocks.needEndBlock[villagerl10nFB._blockIndex] =
          villagerl10nFB._addedBlocks.retVal;
    }
    return villagerl10nFB;
  }

  VillagerL10nFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      villagerl10nFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          villagerl10nFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          villagerl10nFB._addedBlocks);
      _waitingNot = '';
      villagerl10nFB._addedBlocks.needEndBlock[villagerl10nFB._blockIndex] =
          villagerl10nFB._addedBlocks.retVal;
      villagerl10nFB._addedBlocks.needEndBlock[villagerl10nFB._blockIndex] =
          villagerl10nFB._addedBlocks.retVal;
    }
    return villagerl10nFB;
  }

  VillagerL10nFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      villagerl10nFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          villagerl10nFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          villagerl10nFB._addedBlocks);
      _waitingNot = '';
      villagerl10nFB._addedBlocks.needEndBlock[villagerl10nFB._blockIndex] =
          villagerl10nFB._addedBlocks.retVal;
    }
    return villagerl10nFB;
  }

  VillagerL10nFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      villagerl10nFB._addedBlocks = setCriteria(
          pFirst,
          villagerl10nFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          villagerl10nFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        villagerl10nFB._addedBlocks = setCriteria(
            pFirst,
            villagerl10nFB.parameters,
            param,
            SqlSyntax.LessThan,
            villagerl10nFB._addedBlocks);
      } else {
        villagerl10nFB._addedBlocks = setCriteria(
            pFirst,
            villagerl10nFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            villagerl10nFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        villagerl10nFB._addedBlocks = setCriteria(
            pLast,
            villagerl10nFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            villagerl10nFB._addedBlocks);
      } else {
        villagerl10nFB._addedBlocks = setCriteria(
            pLast,
            villagerl10nFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            villagerl10nFB._addedBlocks);
      }
    }
    _waitingNot = '';
    villagerl10nFB._addedBlocks.needEndBlock[villagerl10nFB._blockIndex] =
        villagerl10nFB._addedBlocks.retVal;
    return villagerl10nFB;
  }

  VillagerL10nFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    villagerl10nFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, villagerl10nFB.parameters, param,
            SqlSyntax.GreaterThan, villagerl10nFB._addedBlocks)
        : setCriteria(pValue, villagerl10nFB.parameters, param,
            SqlSyntax.LessThanOrEquals, villagerl10nFB._addedBlocks);
    _waitingNot = '';
    villagerl10nFB._addedBlocks.needEndBlock[villagerl10nFB._blockIndex] =
        villagerl10nFB._addedBlocks.retVal;
    return villagerl10nFB;
  }

  VillagerL10nFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    villagerl10nFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, villagerl10nFB.parameters, param,
            SqlSyntax.LessThan, villagerl10nFB._addedBlocks)
        : setCriteria(pValue, villagerl10nFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, villagerl10nFB._addedBlocks);
    _waitingNot = '';
    villagerl10nFB._addedBlocks.needEndBlock[villagerl10nFB._blockIndex] =
        villagerl10nFB._addedBlocks.retVal;
    return villagerl10nFB;
  }

  VillagerL10nFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    villagerl10nFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, villagerl10nFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, villagerl10nFB._addedBlocks)
        : setCriteria(pValue, villagerl10nFB.parameters, param,
            SqlSyntax.LessThan, villagerl10nFB._addedBlocks);
    _waitingNot = '';
    villagerl10nFB._addedBlocks.needEndBlock[villagerl10nFB._blockIndex] =
        villagerl10nFB._addedBlocks.retVal;
    return villagerl10nFB;
  }

  VillagerL10nFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    villagerl10nFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, villagerl10nFB.parameters, param,
            SqlSyntax.LessThanOrEquals, villagerl10nFB._addedBlocks)
        : setCriteria(pValue, villagerl10nFB.parameters, param,
            SqlSyntax.GreaterThan, villagerl10nFB._addedBlocks);
    _waitingNot = '';
    villagerl10nFB._addedBlocks.needEndBlock[villagerl10nFB._blockIndex] =
        villagerl10nFB._addedBlocks.retVal;
    return villagerl10nFB;
  }

  VillagerL10nFilterBuilder inValues(dynamic pValue) {
    villagerl10nFB._addedBlocks = setCriteria(
        pValue,
        villagerl10nFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        villagerl10nFB._addedBlocks);
    _waitingNot = '';
    villagerl10nFB._addedBlocks.needEndBlock[villagerl10nFB._blockIndex] =
        villagerl10nFB._addedBlocks.retVal;
    return villagerl10nFB;
  }
}
// endregion VillagerL10nField

// region VillagerL10nFilterBuilder
class VillagerL10nFilterBuilder extends SearchCriteria {
  VillagerL10nFilterBuilder(VillagerL10n obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  VillagerL10n _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  VillagerL10nFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  VillagerL10nFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  VillagerL10nFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  VillagerL10nFilterBuilder where(String whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  VillagerL10nFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  /// int count = LIMIT
  VillagerL10nFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  VillagerL10nFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  VillagerL10nFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  VillagerL10nFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  VillagerL10nFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  VillagerL10nField setField(
      VillagerL10nField field, String colName, DbType dbtype) {
    return VillagerL10nField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  VillagerL10nField _villagerId;
  VillagerL10nField get villagerId {
    return _villagerId = setField(_villagerId, 'villagerId', DbType.integer);
  }

  VillagerL10nField _languageId;
  VillagerL10nField get languageId {
    return _languageId = setField(_languageId, 'languageId', DbType.integer);
  }

  VillagerL10nField _name;
  VillagerL10nField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  VillagerL10nField _personality;
  VillagerL10nField get personality {
    return _personality = setField(_personality, 'personality', DbType.text);
  }

  VillagerL10nField _gender;
  VillagerL10nField get gender {
    return _gender = setField(_gender, 'gender', DbType.text);
  }

  VillagerL10nField _specie;
  VillagerL10nField get specie {
    return _specie = setField(_specie, 'specie', DbType.text);
  }

  VillagerL10nField _catchPhrase;
  VillagerL10nField get catchPhrase {
    return _catchPhrase = setField(_catchPhrase, 'catchPhrase', DbType.text);
  }

  VillagerL10nField _song;
  VillagerL10nField get song {
    return _song = setField(_song, 'song', DbType.text);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
        }
      } else {
        whereString += param.whereString;
      }
      if (param.value != null) {
        whereArguments.add(param.value);
      }
      if (param.value2 != null) {
        whereArguments.add(param.value2);
      }
    }
    if (VillagerL10n._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<VillagerL10n> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (VillagerL10n._softDeleteActivated && !hardDelete) {
      r = await _obj._mnVillagerL10n.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnVillagerL10n.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'villagerId IN (SELECT villagerId from villager_l10n ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnVillagerL10n.updateBatch(qparams, values);
  }

  /// This method always returns VillagerL10n Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<VillagerL10n>
  Future<VillagerL10n> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnVillagerL10n.toList(qparams);
    final data = await objFuture;
    VillagerL10n obj;
    if (data.isNotEmpty) {
      obj = VillagerL10n.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (!loadedFields.contains('villager.plVillager') &&
            (preloadFields == null ||
                loadParents ||
                preloadFields.contains('plVillager'))) {
          loadedFields.add('villager.plVillager');
          obj.plVillager =
              obj.plVillager ?? await obj.getVillager(loadParents: loadParents);
        }
        if (!loadedFields.contains('language.plLanguage') &&
            (preloadFields == null ||
                loadParents ||
                preloadFields.contains('plLanguage'))) {
          loadedFields.add('language.plLanguage');
          obj.plLanguage =
              obj.plLanguage ?? await obj.getLanguage(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) villagerl10nCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final villagerl10nsFuture = await _obj._mnVillagerL10n.toList(qparams);
    final int count = villagerl10nsFuture[0]['CNT'] as int;
    if (villagerl10nCount != null) {
      villagerl10nCount(count);
    }
    return count;
  }

  /// This method returns List<VillagerL10n>.
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<VillagerL10n>
  Future<List<VillagerL10n>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<VillagerL10n> villagerl10nsData = await VillagerL10n.fromMapList(
        data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields);
    return villagerl10nsData;
  }

  /// This method returns Json String
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnVillagerL10n.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<VillagerL10n>>
  Future<List<DropdownMenuItem<VillagerL10n>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<VillagerL10n>> o)
          dropDownMenu]) async {
    _buildParameters();
    final villagerl10nsFuture = _obj._mnVillagerL10n.toList(qparams);

    final data = await villagerl10nsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<VillagerL10n>> items = []..add(DropdownMenuItem(
        value: VillagerL10n(),
        child: Text('Select VillagerL10n'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: VillagerL10n.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)
          dropDownMenu]) async {
    _buildParameters();
    qparams.selectColumns = ['villagerId', displayTextColumn];
    final villagerl10nsFuture = _obj._mnVillagerL10n.toList(qparams);

    final data = await villagerl10nsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('Select VillagerL10n'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['villagerId'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> villagerIdData = <int>[];
    qparams.selectColumns = ['villagerId'];
    final villagerIdFuture = await _obj._mnVillagerL10n.toList(qparams);

    final int count = villagerIdFuture.length;
    for (int i = 0; i < count; i++) {
      villagerIdData.add(villagerIdFuture[i]['villagerId'] as int);
    }
    return villagerIdData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnVillagerL10n.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await VillagerL10n.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnVillagerL10n.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion VillagerL10nFilterBuilder

// region VillagerL10nFields
class VillagerL10nFields {
  static TableField _fVillagerId;
  static TableField get villagerId {
    return _fVillagerId = _fVillagerId ??
        SqlSyntax.setField(_fVillagerId, 'villagerId', DbType.integer);
  }

  static TableField _fLanguageId;
  static TableField get languageId {
    return _fLanguageId = _fLanguageId ??
        SqlSyntax.setField(_fLanguageId, 'languageId', DbType.integer);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fPersonality;
  static TableField get personality {
    return _fPersonality = _fPersonality ??
        SqlSyntax.setField(_fPersonality, 'personality', DbType.text);
  }

  static TableField _fGender;
  static TableField get gender {
    return _fGender =
        _fGender ?? SqlSyntax.setField(_fGender, 'gender', DbType.text);
  }

  static TableField _fSpecie;
  static TableField get specie {
    return _fSpecie =
        _fSpecie ?? SqlSyntax.setField(_fSpecie, 'specie', DbType.text);
  }

  static TableField _fCatchPhrase;
  static TableField get catchPhrase {
    return _fCatchPhrase = _fCatchPhrase ??
        SqlSyntax.setField(_fCatchPhrase, 'catchPhrase', DbType.text);
  }

  static TableField _fSong;
  static TableField get song {
    return _fSong = _fSong ?? SqlSyntax.setField(_fSong, 'song', DbType.text);
  }
}
// endregion VillagerL10nFields

//region VillagerL10nManager
class VillagerL10nManager extends SqfEntityProvider {
  VillagerL10nManager()
      : super(ACDatabase(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static String _tableName = 'villager_l10n';
  //static String _colId = 'villagerId';
  static List<String> _primaryKeyList = ['villagerId', 'languageId'];
  static String _whereStr = 'villagerId=? AND languageId=?';
}

//endregion VillagerL10nManager
// region Language
class Language {
  Language({this.id, this.name}) {
    _setDefaultValues();
  }
  Language.withFields(id, this.name) {
    _setDefaultValues();
  }
  Language.withId(id, this.name) {
    _setDefaultValues();
  }
  Language.fromMap(Map<String, dynamic> o) {
    _setDefaultValues();
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) name = o['name'] as String;

    isSaved = true;
  }
  // FIELDS (Language)
  int id;
  String name;
  bool isSaved;
  BoolResult saveResult;
  // end FIELDS (Language)

// COLLECTIONS & VIRTUALS (Language)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plVillagerL10ns', 'plField2'..]) or so on..
  List<VillagerL10n> plVillagerL10ns;

  /// get VillagerL10n(s) filtered by languageId=id
  VillagerL10nFilterBuilder getVillagerL10ns(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return VillagerL10n()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .languageId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Language)

  static const bool _softDeleteActivated = false;
  LanguageManager __mnLanguage;

  LanguageManager get _mnLanguage {
    return __mnLanguage = __mnLanguage ?? LanguageManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChilds(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

// COLLECTIONS (Language)
    if (!forQuery) {
      map['VillagerL10ns'] = await getVillagerL10ns().toMapList();
    }
// END COLLECTIONS (Language)

    return map;
  }

  /// This method returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds(false, true));
  }

  List<dynamic> toArgs() {
    return [id, name];
  }

  List<dynamic> toArgsWithIds() {
    return [id, name];
  }

  static Future<List<Language>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Language.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Language>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Language>[];
    try {
      objList = list
          .map((language) => Language.fromMap(language as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Language.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  /*
    /// REMOVED AFTER v1.2.1+14 
    static Future<List<Language>> fromObjectList(Future<List<dynamic>> o) async {
      final data = await o;
      return await Language.fromMapList(data);
    } 
    */

  static Future<List<Language>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final List<Language> objList = <Language>[];
    for (final map in data) {
      final obj = Language.fromMap(map as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (!loadedFields.contains('language.plVillagerL10ns') &&
            (preloadFields == null ||
                preloadFields.contains('plVillagerL10ns'))) {
          loadedFields.add('language.plVillagerL10ns');
          obj.plVillagerL10ns = obj.plVillagerL10ns ??
              await obj.getVillagerL10ns().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false,
                  loadedFields: loadedFields);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Language by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Language if exist, otherwise returns null
  Future<Language> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    Language obj;
    final data = await _mnLanguage.getById([id]);
    if (data.length != 0) {
      obj = Language.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (!loadedFields.contains('language.plVillagerL10ns') &&
            (preloadFields == null ||
                preloadFields.contains('plVillagerL10ns'))) {
          loadedFields.add('language.plVillagerL10ns');
          obj.plVillagerL10ns = obj.plVillagerL10ns ??
              await obj.getVillagerL10ns().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false,
                  loadedFields: loadedFields);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Language) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0 || !isSaved) {
      await _mnLanguage.insert(this);
      if (saveResult.success) isSaved = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnLanguage.update(this);
    }

    return id;
  }

  /// saveAll method saves the sent List<Language> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  Future<List<dynamic>> saveAll(List<Language> languages) async {
    // final results = _mnLanguage.saveAll('INSERT OR REPLACE INTO language (id,name)  VALUES (?,?)',languages);
    // return results; removed in sqfentity_gen 1.3.0+6
    ACDatabase().batchStart();
    for (final obj in languages) {
      await obj.save();
    }
    return ACDatabase().batchCommit();
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnLanguage.rawInsert(
              'INSERT OR REPLACE INTO language (id,name)  VALUES (?,?)',
              [id, name]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Language id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Language id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Language Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Language>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Language> languages) async {
    final results = await _mnLanguage.rawInsertAll(
        'INSERT OR REPLACE INTO language (id,name)  VALUES (?,?)', languages);
    return results;
  }

  /// Deletes Language

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Language invoked (id=$id)');
    var result = BoolResult();
    {
      result = await VillagerL10n()
          .select()
          .languageId
          .equals(id)
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnLanguage
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnLanguage.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  //private LanguageFilterBuilder _Select;
  LanguageFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return LanguageFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  LanguageFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return LanguageFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion language

// region LanguageField
class LanguageField extends SearchCriteria {
  LanguageField(this.languageFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  LanguageFilterBuilder languageFB;

  LanguageField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  LanguageFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    languageFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, languageFB.parameters, param, SqlSyntax.EQuals,
            languageFB._addedBlocks)
        : setCriteria(pValue, languageFB.parameters, param, SqlSyntax.NotEQuals,
            languageFB._addedBlocks);
    _waitingNot = '';
    languageFB._addedBlocks.needEndBlock[languageFB._blockIndex] =
        languageFB._addedBlocks.retVal;
    return languageFB;
  }

  LanguageFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    languageFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, languageFB.parameters, param,
            SqlSyntax.EQualsOrNull, languageFB._addedBlocks)
        : setCriteria(pValue, languageFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, languageFB._addedBlocks);
    _waitingNot = '';
    languageFB._addedBlocks.needEndBlock[languageFB._blockIndex] =
        languageFB._addedBlocks.retVal;
    return languageFB;
  }

  LanguageFilterBuilder isNull() {
    languageFB._addedBlocks = setCriteria(
        0,
        languageFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        languageFB._addedBlocks);
    _waitingNot = '';
    languageFB._addedBlocks.needEndBlock[languageFB._blockIndex] =
        languageFB._addedBlocks.retVal;
    return languageFB;
  }

  LanguageFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      languageFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          languageFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          languageFB._addedBlocks);
      _waitingNot = '';
      languageFB._addedBlocks.needEndBlock[languageFB._blockIndex] =
          languageFB._addedBlocks.retVal;
    }
    return languageFB;
  }

  LanguageFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      languageFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          languageFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          languageFB._addedBlocks);
      _waitingNot = '';
      languageFB._addedBlocks.needEndBlock[languageFB._blockIndex] =
          languageFB._addedBlocks.retVal;
      languageFB._addedBlocks.needEndBlock[languageFB._blockIndex] =
          languageFB._addedBlocks.retVal;
    }
    return languageFB;
  }

  LanguageFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      languageFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          languageFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          languageFB._addedBlocks);
      _waitingNot = '';
      languageFB._addedBlocks.needEndBlock[languageFB._blockIndex] =
          languageFB._addedBlocks.retVal;
    }
    return languageFB;
  }

  LanguageFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      languageFB._addedBlocks = setCriteria(
          pFirst,
          languageFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          languageFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        languageFB._addedBlocks = setCriteria(pFirst, languageFB.parameters,
            param, SqlSyntax.LessThan, languageFB._addedBlocks);
      } else {
        languageFB._addedBlocks = setCriteria(pFirst, languageFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, languageFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        languageFB._addedBlocks = setCriteria(pLast, languageFB.parameters,
            param, SqlSyntax.GreaterThan, languageFB._addedBlocks);
      } else {
        languageFB._addedBlocks = setCriteria(pLast, languageFB.parameters,
            param, SqlSyntax.LessThanOrEquals, languageFB._addedBlocks);
      }
    }
    _waitingNot = '';
    languageFB._addedBlocks.needEndBlock[languageFB._blockIndex] =
        languageFB._addedBlocks.retVal;
    return languageFB;
  }

  LanguageFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    languageFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, languageFB.parameters, param,
            SqlSyntax.GreaterThan, languageFB._addedBlocks)
        : setCriteria(pValue, languageFB.parameters, param,
            SqlSyntax.LessThanOrEquals, languageFB._addedBlocks);
    _waitingNot = '';
    languageFB._addedBlocks.needEndBlock[languageFB._blockIndex] =
        languageFB._addedBlocks.retVal;
    return languageFB;
  }

  LanguageFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    languageFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, languageFB.parameters, param, SqlSyntax.LessThan,
            languageFB._addedBlocks)
        : setCriteria(pValue, languageFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, languageFB._addedBlocks);
    _waitingNot = '';
    languageFB._addedBlocks.needEndBlock[languageFB._blockIndex] =
        languageFB._addedBlocks.retVal;
    return languageFB;
  }

  LanguageFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    languageFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, languageFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, languageFB._addedBlocks)
        : setCriteria(pValue, languageFB.parameters, param, SqlSyntax.LessThan,
            languageFB._addedBlocks);
    _waitingNot = '';
    languageFB._addedBlocks.needEndBlock[languageFB._blockIndex] =
        languageFB._addedBlocks.retVal;
    return languageFB;
  }

  LanguageFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    languageFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, languageFB.parameters, param,
            SqlSyntax.LessThanOrEquals, languageFB._addedBlocks)
        : setCriteria(pValue, languageFB.parameters, param,
            SqlSyntax.GreaterThan, languageFB._addedBlocks);
    _waitingNot = '';
    languageFB._addedBlocks.needEndBlock[languageFB._blockIndex] =
        languageFB._addedBlocks.retVal;
    return languageFB;
  }

  LanguageFilterBuilder inValues(dynamic pValue) {
    languageFB._addedBlocks = setCriteria(
        pValue,
        languageFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        languageFB._addedBlocks);
    _waitingNot = '';
    languageFB._addedBlocks.needEndBlock[languageFB._blockIndex] =
        languageFB._addedBlocks.retVal;
    return languageFB;
  }
}
// endregion LanguageField

// region LanguageFilterBuilder
class LanguageFilterBuilder extends SearchCriteria {
  LanguageFilterBuilder(Language obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Language _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  LanguageFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  LanguageFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  LanguageFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  LanguageFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  LanguageFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  /// int count = LIMIT
  LanguageFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  LanguageFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  LanguageFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  LanguageFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  LanguageFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  LanguageField setField(LanguageField field, String colName, DbType dbtype) {
    return LanguageField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  LanguageField _id;
  LanguageField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  LanguageField _name;
  LanguageField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
        }
      } else {
        whereString += param.whereString;
      }
      if (param.value != null) {
        whereArguments.add(param.value);
      }
      if (param.value2 != null) {
        whereArguments.add(param.value2);
      }
    }
    if (Language._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<Language> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (Language._softDeleteActivated && !hardDelete) {
      r = await _obj._mnLanguage.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnLanguage.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from language ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnLanguage.updateBatch(qparams, values);
  }

  /// This method always returns Language Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Language>
  Future<Language> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnLanguage.toList(qparams);
    final data = await objFuture;
    Language obj;
    if (data.isNotEmpty) {
      obj = Language.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (!loadedFields.contains('language.plVillagerL10ns') &&
            (preloadFields == null ||
                preloadFields.contains('plVillagerL10ns'))) {
          loadedFields.add('language.plVillagerL10ns');
          obj.plVillagerL10ns = obj.plVillagerL10ns ??
              await obj.getVillagerL10ns().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false,
                  loadedFields: loadedFields);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) languageCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final languagesFuture = await _obj._mnLanguage.toList(qparams);
    final int count = languagesFuture[0]['CNT'] as int;
    if (languageCount != null) {
      languageCount(count);
    }
    return count;
  }

  /// This method returns List<Language>.
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Language>
  Future<List<Language>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Language> languagesData = await Language.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields);
    return languagesData;
  }

  /// This method returns Json String
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnLanguage.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Language>>
  Future<List<DropdownMenuItem<Language>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<Language>> o)
          dropDownMenu]) async {
    _buildParameters();
    final languagesFuture = _obj._mnLanguage.toList(qparams);

    final data = await languagesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Language>> items = []..add(DropdownMenuItem(
        value: Language(),
        child: Text('Select Language'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Language.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)
          dropDownMenu]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final languagesFuture = _obj._mnLanguage.toList(qparams);

    final data = await languagesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Language'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnLanguage.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnLanguage.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Language.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnLanguage.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion LanguageFilterBuilder

// region LanguageFields
class LanguageFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }
}
// endregion LanguageFields

//region LanguageManager
class LanguageManager extends SqfEntityProvider {
  LanguageManager()
      : super(ACDatabase(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static String _tableName = 'language';
  //static String _colId = 'id';
  static List<String> _primaryKeyList = ['id'];
  static String _whereStr = 'id=?';
}

//endregion LanguageManager
class ACDatabaseSequenceManager extends SqfEntityProvider {
  ACDatabaseSequenceManager() : super(ACDatabase());
}
// END OF ENTITIES

// BEGIN CONTROLLERS
// END OF CONTROLLERS
